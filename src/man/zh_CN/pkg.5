'\" te
.\" Copyright (c) 2009, 2014, Oracle and/or its affiliates.All rights reserved.
.TH pkg 5 "2014 年 4 月 10 日" "SunOS 5.12" "标准、环境和宏"
.SH 名称
pkg \- 映像包管理系统
.SH 描述
.sp
.LP
映像包管理系统 \fBpkg\fR(5) 是用于提供软件生命周期管理（安装、升级和删除）的框架。映像包管理以软件包为单位对软件进行管理，软件包是由一组关键字/值对以及可能的数据有效负荷定义的操作的集合。在许多情况下，操作是在文件系统中找到的文件，但它们也表示其他可安装对象，例如驱动程序、服务和用户。
.SH 软件包 FMRI 和版本
.sp
.LP
每个软件包均由带有机制 \fBpkg:\fR 的故障管理资源标识符 (fault management resource identifier, FMRI) 表示。软件包的完整 FMRI 由机制、发布者、软件包名称和以下格式的版本字符串组成：
.sp
.in +2
.nf
pkg://solaris/system/library/c++-runtime@0.5.11,5.11-0.175.0.0.0.2.1:20120921T190358Z
.fi
.in -2
.sp

.sp
.LP
\fBsolaris\fR 是发布者。\fBsystem/library/c++-runtime\fR 是软件包名称。虽然名称空间是有层次的且可具有任意深度，但不存在强制包含；名称从本质上而言是任意的。发布者信息为可选项，但必须位于 \fBpkg://\fR 之后（如果存在）。包含发布者的 FMRI 通常被称为“全限定”。如果不存在发布者信息，那么软件包名称之前通常应带有 \fBpkg:/\fR。
.sp
.LP
如果 FMRI 不包含发布者信息，打包客户端通常允许省略 FMRI 的机制。例如，\fBpkg:/system/library/c++-runtime\fR 可以写为 \fBsystem/library/c++-runtime\fR。如果省略了机制，客户端也允许省略除软件包名称的最后一个组成部分（用于匹配目的）之外的所有其他内容。例如，\fBsystem/library/c++-runtime\fR 可以写为 \fBlibrary/c++-runtime\fR 或 \fBc++-runtime\fR，这将与名为 \fBc++-runtime\fR 的软件包或以 \fB/c++-runtime\fR 结尾的软件包名称匹配。
.sp
.LP
发布者名称将个人、个人组或组织标识为一个或多个软件包的源。为避免发布者名称冲突并有帮于标识发布者，最佳做法是使用代表发布软件包实体的域名作为发布者名称。
.sp
.LP
版本跟在软件包名称后面，由 @ 符号分隔。版本包含四个数字序列，由标点符号分隔。前三个序列中的元素由圆点分隔，各序列可具有任意长度。不允许版本的组成部分以零开头（例如 01.1 或 1.01）。允许以零结尾（例如 1.10）。
.sp
.LP
版本的第一个部分是组件版本。对于紧密绑定到操作系统上的组件，此序列通常是操作系统中该版本的 \fBuname -r\fR 值。对于具有自己的开发生命周期的组件，此序列是一个由小圆点分隔的发行编号，例如 2.4.10。
.sp
.LP
版本的第二个部分（如果存在）必须跟在逗号 (,) 后面，是内部版本。内部版本指定构建软件包内容的操作系统版本，提供了希望软件包内容可成功运行的最低操作系统版本。
.sp
.LP
版本的第三个部分（如果存在）必须跟在连字符 (\fB-\fR) 后面，是分支版本。分支版本是用于提供特定于供应商的信息的版本控制组件。分支版本可在打包元数据发生更改时增大，独立于组件版本。分支版本可能包含内部版本号或其他信息。
.sp
.LP
版本的第四个部分（如果存在）必须跟在冒号 (:) 后面，是一个时间戳。时间戳表示软件包的发布时间。
.sp
.LP
在版本之间进行比较时，不考虑完整版本的任何组件，除非左侧的组件与其相同。因此，\fB4.3-1\fR 大于 \fB4.2-7\fR，因为 \fB4.3\fR 大于 \fB4.2\fR；\fB4.3-3\fR 大于 \fB4.3-1\fR，因为 \fB3\fR 大于 \fB1\fR。
.sp
.LP
\fBpkg.human-version\fR 属性可以用于提供人工可读的版本字符串。对于软件包 FMRI，除了上文描述的软件包版本外，还可以提供 \fBpkg.human-version\fR 属性值，但该值不能替代软件包 FMRI 版本。人工可读的版本字符串仅用于显示目的。请参见“设置操作”了解更多信息。
.sp
.LP
系统的许多部分（如果适用）会在显示 FMRI 时缩短 FMRI 并接受简短格式的输入，以减少显示的或所需的信息量。通常，可以省略机制、发布者、内部版本和时间戳。有时可以省略所有版本控制信息。
.SH 操作
.sp
.LP
操作表示系统上的可安装对象。在软件包的清单中对操作进行了描述。每个操作主要由其名称和一个关键属性组成。这些属性共同引用一个唯一的对象，与该对象一样遵循版本历史记录。操作可以具有其他属性。某些属性由包管理系统直接解释。其他属性可能仅对系统管理员或最终用户有用。
.sp
.LP
操作具有一种简单文本表示法：
.sp
.in +2
.nf
\fIaction_name\fR \fIattribute1\fR=\fIvalue1\fR \fIattribute2\fR=\fIvalue2\fR ...
.fi
.in -2

.sp
.LP
属性名称中不能包含空格、引号或等号 (=)。第一个等号后的所有字符都属于值。值中可以包含所有这些符号，虽然空格必须括在单引号或双引号中。单引号处于括在双引号中的字符串内时不需要进行转义，双引号处于括在单引号中的字符串内时也不需要进行转义。可使用反斜杠 (\) 字符作为引号的前缀来避免终止带引号的字符串。反斜杠可使用反斜杠进行转义。
.sp
.LP
操作可以具有多个属性。可以针对单个操作使用不同的值来多次命名某些属性。具有相同名称的多个属性将被视为无序列表。
.sp
.LP
具有多个属性的操作可以在清单文件中创建长行。可以通过使用反斜杠终止每个不完整的行来对此类行进行折行。请注意，属性/值对之间必须具有此接续字符。属性、属性值及其组合均不可分离。
.sp
.LP
下面列出的属性不是全部属性。事实上，任意属性都可附加到操作中，标准属性组易于扩大以合并将来的开发。
.sp
.LP
某些属性会导致在打包上下文外部执行其他操作。这些属性记录在下面的“执行器”部分中。
.SS "文件操作"
.sp
.LP
\fBfile\fR 操作表示普通文件。\fBfile\fR 操作引用有效负荷，具有四个标准属性：
.sp
.ne 2
.mk
.na
\fB\fBpath\fR\fR
.ad
.RS 9n
.rt  
安装文件的文件系统路径。此属性是 \fBfile\fR 操作的关键属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmode\fR\fR
.ad
.RS 9n
.rt  
文件的访问权限（采用数字格式）。这些只是简单权限，并非 ACL。
.RE

.sp
.ne 2
.mk
.na
\fB\fBowner\fR\fR
.ad
.RS 9n
.rt  
拥有文件的用户的名称。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup\fR\fR
.ad
.RS 9n
.rt  
拥有文件的组的名称。
.RE

.sp
.LP
有效负荷是一个位置属性，因为它未命名。它是操作名称后面的第一个词。在发布的清单中，它是文件内容的 \fBSHA-1\fR 散列。如果存在于尚待发布的清单中，则它表示可以找到有效负荷的路径。请参见 \fBpkgsend\fR(1)。如果值包括一个等号，则可以使用散列属性代替位置属性。这两种属性可用于同一操作中。但是，散列必须完全相同。
.sp
.LP
\fBpreserve\fR 和 \fBoverlay\fR 属性影响是否以及如何安装 \fBfile\fR 操作。
.sp
.ne 2
.mk
.na
\fB\fBpreserve\fR\fR
.ad
.sp .6
.RS 4n
指定在软件包操作过程中何时以及如何保留文件。
.sp
初始安装软件包时，如果软件包提供的文件使用任何值定义了 \fBpreserve\fR 属性并且该文件已经存在于映像中，则现有文件将存储在 \fB/var/pkg/lost+found \fR 中并且安装打包的文件。
.sp
初始安装软件包时，如果软件包提供的文件定义了 \fBpreserve\fR 属性，但该文件尚未存在于映像中，则是否安装该文件取决于 \fBpreserve\fR 属性的值：
.RS +4
.TP
.ie t \(bu
.el o
如果 \fBpreserve\fR 的值是 \fBlegacy\fR，则不安装打包的文件。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果 \fBpreserve\fR 的值不是 \fBlegacy\fR，则安装打包的文件。
.RE
软件包降级时，如果软件包的降级版本提供的文件使用任何值定义了 \fBpreserve\fR 属性并且以下所有条件都为 true，将使用扩展名 \fB\&.update\fR 重命名映像中当前存在的文件并安装降级软件包中的文件：
.RS +4
.TP
.ie t \(bu
.el o
文件存在于映像中。
.RE
.RS +4
.TP
.ie t \(bu
.el o
软件包的降级版本提供的文件的内容不同于软件包的当前安装版本提供的文件的内容。
.RE
.RS +4
.TP
.ie t \(bu
.el o
软件包的降级版本提供的文件的内容不同于映像中存在的文件的内容。
.RE
如果以上任一条件不为 true，处理文件的方式与升级（而不是降级）软件包时相同。
.sp
升级软件包时，如果软件包的升级版本提供的 \fBfile\fR 操作使用任何值定义了 \fBpreserve\fR 属性并且 \fBfile\fR 操作与软件包的当前安装版本提供的 \fBfile\fR 操作相同，则不安装文件并且不修改映像中存在的文件。将保留自安装先前版本以来进行的所有修改。
.sp
升级软件包时，如果软件包的升级版本提供的 \fBfile\fR 操作定义了 \fBpreserve\fR 属性并且 \fBfile\fR 操作是新的或者不同于软件包的当前安装版本提供的 \fBfile\fR 操作，则以下面的方式执行升级：
.RS +4
.TP
.ie t \(bu
.el o
如果文件不存在于映像中，将安装新文件。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件存在于映像中，不存在于软件包的当前安装版本中并且未使用 \fBoriginal_name\fR 属性进行重命名或移动（请参见下文），则现有文件将存储在 \fB/var/pkg/lost+found\fR 中并且安装软件包的升级版本提供的文件。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件存在于映像中并且其内容不同于软件包的当前安装版本提供的文件，则根据 \fBpreserve\fR 属性的值进行升级：
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件具有的 \fBpreserve\fR 值为 \fBrenameold\fR，将使用扩展名 \fB\&.old\fR 重命名现有文件并且使用更新的权限和时间戳（如果存在）安装新文件。请参见下文的 \fBtimestamp\fR 属性描述。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件具有的 \fBpreserve\fR 值为 \fBrenamenew\fR，将使用扩展名 \fB\&.new\fR 安装新文件并且不修改现有文件。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件具有的 \fBpreserve\fR 值为 \fBtrue\fR，则不安装新文件，但是在现有文件中重置权限和时间戳（如果存在）。
.RE
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件存在于映像中，具有的内容与软件包的当前安装版本提供的文件相同并且具有的 \fBpreserve\fR 值为 \fBrenameold\fR 或 \fBrenamenew\fR，则现有文件将替换为软件包的升级版本提供的文件，包括替换权限和时间戳（如果存在）。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件存在于映像中，在升级的软件包中具有的 \fBpreserve\fR 值为 \fBlegacy\fR，并且在软件包的当前安装版本中具有不同的 \fBpreserve\fR 值，则使用扩展名 \fB\&.legacy\fR 重命名现有文件，并使用更新的权限和时间戳（如果存在）安装新文件。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果软件包的升级版本提供的文件存在于映像中并且在升级的软件包和软件包的当前安装版本中具有的 \fBpreserve\fR 值为 \fBlegacy \fR，则在现有文件中重置权限和时间戳（如果存在）。
.RE
.RE

.sp
.ne 2
.mk
.na
\fB\fBoverlay\fR\fR
.ad
.sp .6
.RS 4n
指定操作是允许其他软件包在同一位置交付文件，还是用交付的文件覆盖其他文件。此功能设计用于不参与任何自组装（例如 \fB/etc/motd\fR）且可安全覆盖的配置文件。
.sp
如果未指定 \fBoverlay\fR，多个软件包将无法向同一位置提供文件。
.sp
\fBoverlay\fR 属性可以使用以下值之一：
.sp
.ne 2
.mk
.na
\fB\fBallow\fR\fR
.ad
.RS 9n
.rt  
允许另一个软件包将文件交付到同一位置。除非也设置了 \fBpreserve\fR 属性，否则此值没有效果。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtrue\fR\fR
.ad
.RS 9n
.rt  
该操作交付的文件将覆盖已指定了 \fBallow\fR 的任何其他操作。
.RE

基于覆盖文件的 \fBpreserve\fR 属性值保留对已安装文件所做的更改。在删除时，如果仍要安装将覆盖的操作，则将保留文件的内容，无论是否指定了 \fBpreserve\fR 属性。只能一个操作覆盖另一个操作，且 \fBmode\fR、\fBowner\fR 和 \fBgroup\fR 属性必须匹配。
.RE

.sp
.LP
对于 ELF 文件，可识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBelfarch\fR\fR
.ad
.sp .6
.RS 4n
ELF 文件的体系结构。此属性是 \fBuname -p\fR 查询文件所基于的体系结构后的输出。
.RE

.sp
.ne 2
.mk
.na
\fB\fBelfbits\fR\fR
.ad
.sp .6
.RS 4n
此属性为 \fB32\fR 或 \fB64\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBelfhash\fR\fR
.ad
.sp .6
.RS 4n
此属性是文件中“相关”ELF 部分的散列。这些部分已在装入二进制文件时映射到内存中。在确定两个二进制文件的可执行行为是否将不同时，仅需要考虑这些部分。
.RE

.sp
.LP
对于 \fBfile\fR 操作，可识别下列其他属性：
.sp
.ne 2
.mk
.na
\fB\fBoriginal_name\fR\fR
.ad
.sp .6
.RS 4n
此属性用于处理可编辑文件在软件包之间或在位置之间（或在这两者之间）的移动操作。此属性采用的格式为源软件包的名称后跟一个冒号和文件的原始路径。所删除的任何文件将使用其软件包和路径或 \fBoriginal_name\fR 属性的值（如果指定）进行记录。所安装的已设置 \fBoriginal_name\fR 属性的任何可编辑文件将使用具有该名称的文件（如果它在同一打包操作中被删除）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBrelease-note\fR\fR
.ad
.sp .6
.RS 4n
该属性用于指明此文件包含发行说明文本。该属性的值为软件包 FMRI。如果 FMRI 指定的软件包名称存在于原始映像中，指定的版本比原始映像中的软件包版本更高，则此文件将成为发行说明的一部分。特殊 FMRI \fBfeature/pkg/self\fR 是指包含软件包。如果 \fBfeature/pkg/self\fR 的版本为 0，则此文件仅在初次安装时是发行说明的一部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fBrevert-tag\fR\fR
.ad
.sp .6
.RS 4n
此属性用于标记应恢复为一个组的可编辑文件。\fBrevert-tag\fR 属性的值为 \fItagname\fR。可为单个 \fBfile\fR 操作指定多个 \fBrevert-tag\fR 属性。在使用所指定的任意标记调用 \fBpkg revert\fR 时，文件将恢复为其清单定义的状态。有关 \fBpkg revert\fR 命令的更多信息，请参见 \fBpkg\fR(1) 手册页。
.sp
还可以在目录级别指定 \fBrevert-tag\fR 属性。请参见下文中的“目录操作”。
.RE

.sp
.ne 2
.mk
.na
\fB\fBsysattr\fR\fR
.ad
.sp .6
.RS 4n
此属性用于指定应该为此文件设置的任何系统属性。\fBsysattr\fR 属性的值可以是逗号分隔的详细系统属性列表，也可以是精简系统属性选项的字符串序列，如以下示例中所示。支持的系统属性在 \fBchmod\fR(1) 手册页中有介绍。在清单中指定的系统属性是一种额外设置，是对可能已由操作系统的其他子系统设置的系统属性的进一步设置。
.sp
.in +2
.nf
file path=opt/secret_file sysattr=hidden,immutable
file path=opt/secret_file sysattr=Hi
.fi
.in -2

.RE

.sp
.ne 2
.mk
.na
\fB\fBtimestamp\fR\fR
.ad
.sp .6
.RS 4n
此属性用于设置文件的访问权限和修改时间。必须以 ISO-8601 格式使用 UTC 表示 \fBtimestamp\fR 属性值，省略冒号和连字符。
.sp
为 Python 打包 \fB .pyc\fR 或 \fB\&.pyo\fR 文件时需要 \fBtimestamp\fR 属性。\fB\&.pyc\fR 或 \fB\&.pyo\fR 文件的相关 \fB .py\fR 文件必须使用这些文件内嵌入的时间戳进行标记，如以下示例中所示：
.sp
.in +2
.nf
file path=usr/lib/python2.6/vendor-packages/pkg/__init__.pyc ...
file path=usr/lib/python2.6/vendor-packages/pkg/__init__.py \e
     timestamp=20130311T221521Z ...
.fi
.in -2

.RE

.sp
.LP
\fBfile\fR 操作的以下属性由系统自动生成，不能由软件包开发者指定：
.sp
.ne 2
.mk
.na
\fB\fBhash\fR\fR
.ad
.sp .6
.RS 4n
未压缩文件的 SHA-1 散列。
.RE

.sp
.ne 2
.mk
.na
\fB\fBchash\fR\fR
.ad
.sp .6
.RS 4n
压缩文件的 SHA-1 散列。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.size\fR\fR
.ad
.sp .6
.RS 4n
未压缩文件的大小（字节）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.csize\fR\fR
.ad
.sp .6
.RS 4n
压缩文件的大小（字节）。
.RE

.SS "目录操作"
.sp
.LP
\fBdir\fR 操作类似于 \fBfile\fR 操作，因为它表示文件系统对象。但 \fBdir\fR 操作表示目录而不是普通文件。\fBdir\fR 操作具有与 \fBfile\fR 操作相同的 \fBpath\fR、\fBmode\fR、\fBowner\fR 和 \fBgroup\fR 属性，其中 \fBpath\fR 是关键属性。\fBdir\fR 操作也接受 \fBrevert-tag\fR 属性。\fBrevert-tag\fR 属性的值对 \fBfile\fR 和 \fBdir\fR 操作是不同的。
.sp
.LP
目录是 IPS 中包括的引用。当显式或隐式引用某目录的最新软件包不再引用该目录时，将删除该目录。如果该目录包含未打包的文件系统对象，则将这些项移动到 \fB$IMAGE_META/lost+found\fR 中。有关 \fB$IMAGE_META\fR 的更多信息，请参见“文件”部分。
.sp
.ne 2
.mk
.na
\fB\fBrevert-tag\fR\fR
.ad
.sp .6
.RS 4n
此属性用于标识应作为一个集合删除的未打包文件。有关如何为 \fBfile\fR 操作指定此属性的说明，请参见上文中的“文件操作”。对于目录，\fBrevert-tag\fR 属性的值为 \fItagname\fR\fB=\fR\fIpattern\fR。可为单个 \fBdir\fR 操作指定多个 \fBrevert-tag\fR 属性。在使用匹配的 \fItagname\fR 调用 \fBpkg revert\fR 时，将删除此 \fBdir\fR 目录下匹配 \fIpattern\fR（使用 shell glob 字符）的所有未打包文件或目录。有关 \fBpkg revert\fR 命令的更多信息，请参见 \fBpkg\fR(1) 手册页。
.RE

.sp
.ne 2
.mk
.na
\fB\fBsalvage-from\fR\fR
.ad
.sp .6
.RS 4n
此属性可用于将未打包的内容移动到一个新目录中。此属性的值是所挽救项的目录的名称。创建以 \fBsalvage-from\fR 属性的值命名的目录的任何内容时，具有 \fBsalvage-from\fR 属性的目录会继承。
.RE

.SS "链接操作"
.sp
.LP
\fBlink\fR 操作表示符号链接。\fBlink\fR 操作具有以下标准属性：
.sp
.ne 2
.mk
.na
\fB\fBpath\fR\fR
.ad
.sp .6
.RS 4n
安装符号链接的文件系统路径。此属性是 \fBlink\fR 操作的关键属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtarget\fR\fR
.ad
.sp .6
.RS 4n
符号链接的目标。链接将解析到的文件系统对象。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator\fR\fR
.ad
.sp .6
.RS 4n
指定由给定中介组（例如 \fBpython\fR）中涉及的所有路径名称共享的中介名称空间中的条目。可基于 \fBmediator-version\fR 和/或 \fBmediator-implementation\fR 执行链接中介。给定路径名称的所有中介链接必须指定同一中介。但是，并非所有中介版本和实现都需要在给定路径上提供链接。如果中介不提供链接，则会在选定该中介时删除链接。\fBmediator\fR 与特定版本和/或实现组合起来表示可选择供包管理系统使用的中介。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-version\fR\fR
.ad
.sp .6
.RS 4n
指定 \fBmediator\fR 属性描述的接口的版本（表示为非负整数的点分序列）。如果指定了 \fBmediator\fR 而未指定 \fBmediator-implementation\fR，则此属性是必需的。本地系统管理员可以显式设置要使用的版本。指定的值通常应与提供链接的软件包版本相匹配（例如，\fBruntime/python-26\fR 应使用 \fBmediator-version=2.6\fR），尽管这不是必需的。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-implementation\fR\fR
.ad
.sp .6
.RS 4n
指定除 \fBmediator-version\fR 之外还使用中介实现，或使用中介实现代替 mediator-version。不认为实现字符串应进行排序，如果系统管理员未显式指定，则由 \fBpkg\fR(5) 任意选择一个字符串。
.sp
该值可以是由字母数字字符和空格组成的任意长度的字符串。如果实现本身可被版本化或已被版本化，则应在字符串的结尾处在 @ 之后指定版本（表示为非负整数的点分序列）。如果存在实现的多个版本，则缺省行为是选择最高版本的实现。
.sp
如果系统上仅安装了特定路径的实现中介链接的一个实例，则会自动选择该实例。如果以后安装了该路径的其他链接，除非应用供应商、站点或本地覆盖或者如果某一链接进行了版本中介，否则不会切换链接。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmediator-priority\fR\fR
.ad
.sp .6
.RS 4n
在解决中介链接中的冲突时，\fBpkg\fR(5) 通常会选择 \fBmediator-version\fR 值最大的链接，如果不可能，则会基于 \fBmediator-implementation\fR 进行选择。此属性用于为常规冲突解决方案过程指定覆盖。
.sp
如果未指定此属性，则会应用缺省中介选择逻辑。
.sp
如果值为 \fBvendor\fR，则与未指定 \fBmediator-priority\fR 的链接相比，会优先选择该链接。
.sp
如果值为 \fBsite\fR，则与值为 \fBvendor\fR 或未指定 \fBmediator-priority\fR 的链接相比，会优先选择该链接。
.sp
本地系统管理员可以覆盖上面所述的选择逻辑。
.RE

.SS "硬链接操作"
.sp
.LP
\fBhardlink\fR 操作表示硬链接。它具有与 \fBlink\fR 操作相同的属性，\fBpath\fR 也是其关键属性。
.SS "驱动程序操作"
.sp
.LP
\fBdriver\fR 操作表示设备驱动程序。\fBdriver\fR 操作不引用有效负荷。驱动程序文件自身必须作为 \fBfile\fR 操作进行安装。可识别下列属性（有关更多信息，请参见 \fBadd_drv\fR(1M)）：
.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.sp .6
.RS 4n
驱动程序的名称。这通常是（但并不总是）二进制驱动程序文件的文件名。此属性是 \fBdriver\fR 操作的关键属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBalias\fR\fR
.ad
.sp .6
.RS 4n
此属性表示驱动程序的别名。给定的驱动程序可以具有多个 \fBalias\fR 属性。无需任何特殊的引号规则。
.RE

.sp
.ne 2
.mk
.na
\fB\fBclass\fR\fR
.ad
.sp .6
.RS 4n
此属性表示驱动程序类。给定的驱动程序可以具有多个 \fBclass\fR 属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBperms\fR\fR
.ad
.sp .6
.RS 4n
此属性表示驱动程序的设备节点的文件系统权限。
.RE

.sp
.ne 2
.mk
.na
\fB\fBclone_perms\fR\fR
.ad
.sp .6
.RS 4n
此属性表示此驱动程序的克隆驱动程序次要节点的文件系统权限。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpolicy\fR\fR
.ad
.sp .6
.RS 4n
此属性指定设备的其他安全策略。给定的驱动程序可以具有多个 \fBpolicy\fR 属性，但次要设备规范不可以存在于多个属性中。
.RE

.sp
.ne 2
.mk
.na
\fB\fBprivs\fR\fR
.ad
.sp .6
.RS 4n
此属性指定驱动程序所用的特权。给定的驱动程序可以具有多个 \fBprivs\fR 属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBdevlink\fR\fR
.ad
.sp .6
.RS 4n
此属性指定 \fB/etc/devlink.tab\fR 中的条目。该值是定义了进入文件的确切行，带有由 \fB\t\fR 表示的制表符。有关更多信息，请参见 \fBdevlinks\fR(1M)。给定的驱动程序可以具有多个 \fBdevlink\fR 属性。
.RE

.SS "依赖操作"
.sp
.LP
\fBdepend\fR 操作表示软件包间的依赖性。一个软件包可以依赖于另一个软件包，因为第一个软件包需要第二个软件包中的功能才能运行自身包含的功能或者甚至进行安装。依赖性可以是可选的。如果安装时未满足某个依赖性，包管理系统会尝试安装或更新依赖软件包至足够新的版本（受其他约束限制）。
.sp
.LP
可以识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBfmri\fR\fR
.ad
.sp .6
.RS 4n
表示依赖软件包的 FMRI。此属性是 \fBdependency\fR 操作的关键属性。\fBfmri\fR 值不得包括发布者。假定软件包名称是完整的。\fBrequire-any\fR 类型的依赖性可具有多个 \fBfmri\fR 属性。\fBfmri\fR 值中的版本是可选项，虽然对于某些类型的依赖性来说，不带版本的 \fBfmri\fR 没有任何意义。
.RE

.sp
.ne 2
.mk
.na
\fB\fBtype\fR\fR
.ad
.sp .6
.RS 4n
依赖性的类型。
.sp
.ne 2
.mk
.na
\fB\fBrequire\fR\fR
.ad
.sp .6
.RS 4n
该依赖性是必需的，必须具有等于或高于 \fBfmri\fR 属性中所指定版本的版本。如果未指定版本，则任何版本都满足依赖性。如果不能满足其任一必需依赖性，则无法安装软件包。
.RE

.sp
.ne 2
.mk
.na
\fB\fBoptional\fR\fR
.ad
.sp .6
.RS 4n
该依赖性（如果存在）必须处于指定的版本级别或更高级别。
.RE

.sp
.ne 2
.mk
.na
\fB\fBexclude\fR\fR
.ad
.sp .6
.RS 4n
如果该依赖性存在于指定的版本级别或更高级别，则无法安装包含软件包。如果未指定版本，则依赖软件包无法与指定依赖性的软件包同时安装。
.RE

.sp
.ne 2
.mk
.na
\fB\fBincorporate\fR\fR
.ad
.sp .6
.RS 4n
该依赖性是可选项，但是依赖软件包的版本会受到约束。请参见下文的“约束和冻结”。
.RE

.sp
.ne 2
.mk
.na
\fB\fBrequire-any\fR\fR
.ad
.sp .6
.RS 4n
多个 \fBfmri\fR 属性指定的多个依赖软件包中的任一个都可满足依赖性（遵循与 \fBrequire\fR 依赖性类型相同的规则）。
.RE

.sp
.ne 2
.mk
.na
\fB\fBconditional\fR\fR
.ad
.sp .6
.RS 4n
该依赖性仅在系统上存在 \fBpredicate\fR 属性定义的软件包时才是必需的。
.RE

.sp
.ne 2
.mk
.na
\fB\fBorigin\fR\fR
.ad
.sp .6
.RS 4n
在安装此软件包之前，相关项目标（如果存在）在要修改的映像上必须具有指定值或更大值。如果 \fBroot-image\fR 属性的值为 \fBtrue\fR，则目标必须存在于根目录为 / 的映像上，才能安装此软件包。如果 \fBroot-image\fR 属性的值为 \fBtrue\fR，并且 \fBfmri\fR 属性的值以 \fBpkg:/feature/firmware/\fR 开头，则将剩余的 \fBfmri\fR 值视为 \fB/usr/lib/fwenum\fR 中计算固件依赖项的命令。有关示例，请参见《\fIPackaging and Delivering Software With the Image Packaging System\fR》。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup\fR\fR
.ad
.sp .6
.RS 4n
除非软件包出现在映像避免列表上，否则该依赖性是必需的。请注意，过时软件包会无提示地满足组依赖性。请参见 \fBpkg\fR(1) 中的 \fBavoid\fR 子命令。
.RE

.sp
.ne 2
.mk
.na
\fB\fBparent\fR\fR
.ad
.sp .6
.RS 4n
如果映像不是子映像，会忽略该依赖性。如果映像是子映像，则依赖性必须存在于父映像中。符合 \fBparent\fR 依赖性的软件包版本与用于 \fBincorporate\fR 依赖性的软件包版本相同。
.RE

.RE

.sp
.ne 2
.mk
.na
\fB\fBpredicate\fR\fR
.ad
.sp .6
.RS 4n
表示 \fBconditional\fR 依赖性的谓词的 FMRI。
.RE

.sp
.ne 2
.mk
.na
\fB\fBroot-image\fR\fR
.ad
.sp .6
.RS 4n
仅对 \fBorigin\fR 依赖性有影响，如上所述。
.RE

.SS "许可证操作"
.sp
.LP
\fBlicense\fR 操作表示许可证或其他与软件包内容相关联的信息文件。软件包可以通过 \fBlicense\fR 操作将许可证、免责声明或其他指南提供给软件包安装程序。
.sp
.LP
\fBlicense\fR 操作的有效负荷将提供到与软件包相关的映像元数据目录中，且应仅包含用户可读的文本数据。不应包含 HTML 或任何其他形式的标记。通过各属性，\fBlicense\fR 操作可以向客户端指示必须显示相关的有效负荷并/或要求接受它。显示并/或接受的方法由客户端决定。
.sp
.LP
可以识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBlicense\fR\fR
.ad
.sp .6
.RS 4n
此属性是 \fBlicense\fR 操作的关键属性。此属性为许可证提供有意义的描述，以帮助用户在无需阅读许可证文本本身的情况下确定内容。其中一些示例值包括：
.RS +4
.TP
.ie t \(bu
.el o
ABC Co. Copyright Notice
.RE
.RS +4
.TP
.ie t \(bu
.el o
ABC Co. Custom License
.RE
.RS +4
.TP
.ie t \(bu
.el o
Common Development and Distribution License 1.0 (CDDL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
GNU General Public License 2.0 (GPL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
GNU General Public License 2.0 (GPL) Only
.RE
.RS +4
.TP
.ie t \(bu
.el o
MIT License
.RE
.RS +4
.TP
.ie t \(bu
.el o
Mozilla Public License 1.1 (MPL)
.RE
.RS +4
.TP
.ie t \(bu
.el o
Simplified BSD License
.RE
\fBlicense\fR 值在软件包内必须唯一。建议在说明中包括许可证的版本，如上面的几个示例所示。如果软件包有对应多种不同许可证的代码，请使用多个 \fBlicense\fR 操作。许可证属性值的长度不得超过 64 个字符。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmust-accept\fR\fR
.ad
.sp .6
.RS 4n
如果为 \fBtrue\fR，则用户必须先接受此许可证，才能安装或更新相关软件包。省略此属性等效于 \fBfalse\fR。接受的方法（例如，交互式或基于配置）由客户端决定。对于软件包更新，如果未更改许可证操作或有效负荷，将忽略此属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmust-display\fR\fR
.ad
.sp .6
.RS 4n
如果为 \fBtrue\fR，则在执行打包操作期间客户端必须显示操作的有效负荷。省略此值等效于 \fBfalse\fR。此属性不应该用于版权声明。此属性应该仅用于许可证或执行操作期间必须显示的其他材料。显示的方法由客户端决定。对于软件包更新，如果未更改许可证操作或有效负荷，将忽略此属性。
.RE

.SS "传统操作"
.sp
.LP
\fBlegacy\fR 操作表示由传统包管理系统使用的软件包数据。与此操作相关联的属性将添加到传统系统的数据库中，以便查询这些数据库的工具可以像实际安装了传统软件包一样工作。需特别指出的是，这应足以使传统系统确信系统上已安装了 \fBpkg\fR 属性指定的软件包，如此便可使用软件包来满足依赖性。
.sp
.LP
可识别根据 \fBpkginfo\fR(4) 上的参数指定的下列属性：
.sp
.ne 2
.mk
.na
\fB\fBcategory\fR\fR
.ad
.sp .6
.RS 4n
\fBCATEGORY\fR 参数的值。缺省值为 \fBsystem\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBdesc\fR\fR
.ad
.sp .6
.RS 4n
\fBDESC\fR 参数的值。
.RE

.sp
.ne 2
.mk
.na
\fB\fBhotline\fR\fR
.ad
.sp .6
.RS 4n
\fBHOTLINE\fR 参数的值。
.RE

.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.sp .6
.RS 4n
\fBNAME\fR 参数的值。缺省值为 \fBnone provided\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg\fR\fR
.ad
.sp .6
.RS 4n
要安装的软件包的缩写。缺省值为软件包的 FMRI 中的名称。此属性是 \fBlegacy\fR 操作的关键属性。
.RE

.sp
.ne 2
.mk
.na
\fB\fBvendor\fR\fR
.ad
.sp .6
.RS 4n
\fBVENDOR\fR 参数的值。
.RE

.sp
.ne 2
.mk
.na
\fB\fBversion\fR\fR
.ad
.sp .6
.RS 4n
VERSION 参数的值。缺省值为软件包的 FMRI 中的版本。
.RE

.SS "设置操作"
.sp
.LP
\fBset\fR 操作表示软件包级别的属性或元数据，例如软件包描述。
.sp
.LP
可以识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBname\fR\fR
.ad
.RS 9n
.rt  
属性的名称。
.RE

.sp
.ne 2
.mk
.na
\fB\fBvalue\fR\fR
.ad
.RS 9n
.rt  
提供给属性的值。
.RE

.sp
.LP
\fBset\fR 操作可以提供软件包作者选择的任何元数据。但是，存在大量定义明确的对包管理系统具有特定意义的属性名称。
.sp
.ne 2
.mk
.na
\fB\fBinfo.classification\fR\fR
.ad
.sp .6
.RS 4n
一个 \fBpkg\fR(5) 客户端可以使用一个或多个标记对软件包进行分类。该值应具有一个机制（例如 "org.opensolaris.category.2008" 或 "org.acm.class.1998"）和实际分类（例如 "Applications/Games"），由冒号 (:) 分隔。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.description\fR\fR
.ad
.sp .6
.RS 4n
软件包的内容和功能的详细描述，长度通常约为一个段落。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.fmri\fR\fR
.ad
.sp .6
.RS 4n
包含方软件包的名称和版本。请参见“描述”部分中的“软件包 FMRI 和版本”。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.human-version\fR\fR
.ad
.sp .6
.RS 4n
IPS 使用的版本方案很严格。请参见“描述”部分中的“软件包 FMRI 和版本”。较灵活的版本可以 \fBpkg.human-version\fR 属性值提供。IPS 工具显示该值，例如 \fBpkg info\fR、\fBpkg contents\fR 和 \fBpkg search\fR。\fBpkg.human-version\fR 值不用作版本比较的基准，并且不能用来替代 \fBpkg.fmri\fR 版本。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.obsolete\fR\fR
.ad
.sp .6
.RS 4n
如果为 \fBtrue\fR，则将软件包标记为过时。过时的软件包除了设置操作外不能具有任何其他操作，且不得标记为已重命名。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.renamed\fR\fR
.ad
.sp .6
.RS 4n
如果为 \fBtrue\fR，则软件包已被重命名。软件包中还必须存在一个或多个 \fBdepend\fR 操作，且指向此软件包已重命名到的软件包版本。软件包不能同时标记为已重命名和过时，但在其他情况下可以具有任意多个设置操作。
.RE

.sp
.ne 2
.mk
.na
\fB\fBpkg.summary\fR\fR
.ad
.sp .6
.RS 4n
软件包的一行简短描述。
.RE

.SS "组操作"
.sp
.LP
\fBgroup\fR 操作定义 UNIX 组，如 \fBgroup\fR(4) 中所定义。不存在对于组口令的支持。使用此操作定义的组最初不具有用户列表。可以使用 \fBuser\fR 操作添加用户。可以识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBgroupname\fR\fR
.ad
.sp .6
.RS 4n
组名的值。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgid\fR\fR
.ad
.sp .6
.RS 4n
组的唯一数字 ID。缺省值为 100 之下的第一个自由组。
.RE

.SS "用户操作"
.sp
.LP
\fBuser\fR 操作定义 UNIX 用户，如 \fB/etc/passwd\fR、\fB/etc/shadow\fR、\fB/etc/group\fR 和 \fB/etc/ftpd/ftpusers\fR 文件中所定义。将为使用此 \fBuser\fR 操作定义的用户向相应文件添加条目。
.sp
.LP
\fBuser\fR 操作用于为要使用的守护进程或其他软件定义用户。不使用 \fBuser\fR 操作定义管理帐户或交互式帐户。
.sp
.LP
可以识别下列属性：
.sp
.ne 2
.mk
.na
\fB\fBusername\fR\fR
.ad
.sp .6
.RS 4n
用户的唯一名称
.RE

.sp
.ne 2
.mk
.na
\fB\fBpassword\fR\fR
.ad
.sp .6
.RS 4n
用户的加密口令。缺省值为 \fB*LK*\fR。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBuid\fR\fR
.ad
.sp .6
.RS 4n
用户的唯一 UID。缺省值为 100 之下的第一个自由值。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup\fR\fR
.ad
.sp .6
.RS 4n
用户的主组名称。必须可在 \fB/etc/group\fR 中找到。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgcos-field\fR\fR
.ad
.sp .6
.RS 4n
\fB/etc/passwd\fR 中 \fBgcos\fR 字段的值。缺省值为 \fBusername\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBhome-dir\fR\fR
.ad
.sp .6
.RS 4n
用户的起始目录。此目录必须位于系统映像目录中，不在 \fB/home\fR 等其他挂载点下。缺省值为 \fB/\fR。
.RE

.sp
.ne 2
.mk
.na
\fB\fBlogin-shell\fR\fR
.ad
.sp .6
.RS 4n
用户的缺省 shell。缺省值为空。
.RE

.sp
.ne 2
.mk
.na
\fB\fBgroup-list\fR\fR
.ad
.sp .6
.RS 4n
用户所属的辅助组。请参见 \fBgroup\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBftpuser\fR\fR
.ad
.sp .6
.RS 4n
可设置为 \fBtrue\fR 或 \fBfalse\fR。缺省值 \fBtrue\fR 指示允许用户通过 FTP 登录。请参见 \fBftpusers\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBlastchg\fR\fR
.ad
.sp .6
.RS 4n
1970 年 1 月 1 日至上次修改口令的日期之间的天数。缺省值为空。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmin\fR\fR
.ad
.sp .6
.RS 4n
所需的相邻两次更改口令之间的最小天数。必须将此字段设置为 0 或更大值才能启用口令有效期。缺省值为空。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBmax\fR\fR
.ad
.sp .6
.RS 4n
口令的最大有效天数。缺省值为空。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBwarn\fR\fR
.ad
.sp .6
.RS 4n
用户在口令到期之前多少天收到警告。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBinactive\fR\fR
.ad
.sp .6
.RS 4n
允许该用户不活动的天数。按每台计算机对此进行计数。可从计算机的 \fBlastlog\fR 文件获取有关上次登录的信息。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBexpire\fR\fR
.ad
.sp .6
.RS 4n
表示为自 UNIX 纪元（1970 年 1 月 1 日）后的天数的绝对日期。达到此数字时，将无法再进行登录。例如，到期值为 13514 指定登录将在 2007 年 1 月 1 日失效。请参见 \fBshadow\fR(4)。
.RE

.sp
.ne 2
.mk
.na
\fB\fBflag\fR\fR
.ad
.sp .6
.RS 4n
设置为空。请参见 \fBshadow\fR(4)。
.RE

.SH 执行器
.sp
.LP
在某些上下文中，附加操作可能适合在为特定操作做准备时执行或者在引入特定操作后执行。这些附加操作特定于操作系统，通常仅在实时系统映像上才需要。实时映像是在当前区域的活动的、正在运行的引导环境的 \fB/\fR 处挂载的映像。当软件包安装或删除过程中涉及的多个操作具有相同的执行器时，会为该安装或删除过程执行一次与执行器存在情况相对应的操作。
.sp
.LP
错误指定的执行器可能会导致软件包安装失败，如果该执行器无法确定进行安全安装的方法。
.sp
.LP
系统定义了以下执行器：
.sp
.ne 2
.mk
.na
\fB\fBreboot-needed\fR\fR
.ad
.sp .6
.RS 4n
可设置为 \fBtrue\fR 或 \fBfalse\fR。此执行器声明：如果软件包系统在实时映像上操作，则必须在新引导环境中更新或删除标记的操作。\fBbe-policy\fR 映像属性控制新引导环境的创建。有关 \fBbe-policy\fR 属性的更多信息，请参见 \fBpkg\fR(1) 手册页的“映像属性”部分。
.RE

.sp
.ne 2
.mk
.na
\fB\fBdisable_fmri\fR、\fBrefresh_fmri\fR、\fBrestart_fmri\fR、\fBsuspend_fmri\fR\fR
.ad
.sp .6
.RS 4n
其中每个执行器在软件包安装或删除过程中均使用服务实例的 FMRI 值进行操作。根据 \fBsvcadm\fR(1M) 的 \fBdisable\fR 子命令，\fBdisable_fmri\fR 会导致给定的 FMRI 在删除操作之前被禁用。根据 \fBsvcadm\fR(1M) 的各个子命令，\fBrefresh_fmri\fR 和 \fBrestart_fmri\fR 会导致给定的 FMRI 在安装、更新或删除操作后被刷新或重新启动。最后，\fBsuspend_fmri\fR 会导致给定的 FMRI 在安装操作阶段之前被临时禁用，并在该阶段完成后被重新启用。
.sp
该值可以包含与多个服务实例匹配的模式。但是，它必须使用 \fBsvcs\fR(1) 所接受的 glob 显式执行此操作，而不是通过不指示任何实例来隐式执行此操作。
.RE

.SH 中介
.sp
.LP
中介是代表一组相关符号链接或硬链接的名称。如果两个或更多个链接操作拥有相同的路径和中介名称，则用户或软件包系统会根据版本、实现或优先级选择链接目标。有关中介属性的信息，请参见“链接操作”。
.sp
.LP
以下示例显示名为 \fBjava\fR 的中介的两个不同实例（其中，链接选择的区别为版本）。这两个 \fBlink\fR 操作会显示在两个不同软件包中。
.sp
.in +2
.nf
link mediator=java mediator-version=1.6 path=usr/java target=jdk/jdk1.6.0_31
link mediator=java mediator-version=1.7 path=usr/java target=jdk/jdk1.7.0_02
.fi
.in -2

.sp
.LP
有关如何为此链接路径选择所需版本的信息，请参见 \fBpkg\fR(1) 手册页中的 \fBset-mediator\fR 子命令。要选择版本，必须安装两个软件包。
.SH 约束和冻结
.sp
.LP
在将软件包转换为新版本、添加到系统中或从系统中删除时，所选的版本或是否允许删除由对软件包施加的各种约束确定。这些约束可由其他软件包以依赖性的形式进行定义，或者由管理员以冻结的形式进行定义。
.sp
.LP
最常见的约束形式由 \fBrequire\fR 依赖性提供，如上面的“依赖操作”中所述。此类约束可防止软件包被降级或删除。
.sp
.LP
操作系统的大多数部分由名为 \fB incorporation\fR 的软件包进行封装。这些软件包主要提供由 \fBincorporate\fR 依赖性表示的约束。
.sp
.LP
如上所述，合并的软件包不需要存在于系统上，但如果存在，它将同时指定一个非独占最低版本和一个独占最高版本。例如，如果依赖性的 FMRI 具有版本 1.4.3，则低于 1.4.3 的版本不能满足依赖性，且任何高于或等于 1.4.4 的版本也不能满足依赖性。但是，可以允许仅仅扩展了点分序列的版本，如 1.4.3.7。
.sp
.LP
Incorporation 用于强制系统的各部分进行同步升级。对于某些组件（例如 C 库和内核），这是一项基本要求。对于其他组件（例如，不具有任何其他依赖性的简单用户级组件），同步升级仅仅用来提供一组经过测试的已知软件包版本，这些软件包版本可由 incorporation 的特定版本进行引用。
.sp
.LP
因为 incorporation 只是一个软件包，所以可将其删除，它提供的所有约束也将随之解除。但是，Oracle Solaris 提供的许多 incorporation 是其合并的软件包所必需的，因为解除其约束可能会不安全。
.sp
.LP
尝试将软件包升级到已安装的 incorporation 所不允许的版本，将不会尝试查找更高的 incorporation 版本来满足该请求，反而会失败。如果必须移动约束本身，而又无法删除指定它的 incorporation，则必须将 incorporation 升级到指定所需约束版本的版本。升级 incorporation 会导致不能满足新版本提供的约束的所有合并软件包也进行升级。
.sp
.LP
系统管理员可以使用 \fBpkg freeze\fR 命令约束软件包。在未提供版本的情况下，将指定软件包约束为系统上已安装的版本。如果提供了版本化软件包，则此管理约束或冻结会像已安装了合并依赖性（其中 \fBfmri\fR 属性具有所提供的软件包版本值）一样进行操作。
.sp
.LP
包管理系统永远不会自动解除冻结。要解除约束，请使用 \fBpkg unfreeze\fR 命令。
.SH 发布者和系统信息库
.sp
.LP
如上所述，发布者只是软件包客户端用来标识软件包提供者的一个名称。发布者可使用软件包系统信息库和/或软件包归档来发行其软件包。软件包系统当前支持以下两种类型的系统信息库：源系统信息库和镜像系统信息库。
.sp
.LP
\fB源\fR是包含一个或多个软件包的所有元数据（例如，目录、清单和搜索索引）和内容（文件）的软件包系统信息库。如果在一个映像中为给定发布者配置了多个源，则软件包客户端 API 会尝试选择从其检索软件包数据的最佳源。这是最常见的系统信息库类型，当每次在软件包系统信息库上使用 \fBpkgsend\fR 或 \fBpkgrecv\fR 时进行隐式创建。
.sp
.LP
\fBmirror\fR 是仅包含软件包内容（文件）的软件包系统信息库。如果在一个映像中为给定发布者配置了一个或多个镜像，则客户端 API 会优先使用镜像进行软件包内容检索并尝试选择从其检索软件包内容的最佳镜像。如果镜像不可访问、不具有所需内容或者运行缓慢，客户端 API 将从任何已配置的源系统信息库检索内容。镜像设计用于通过 \fBpkg.depotd\fR(1M) 的动态镜像功能在一组可信客户端之间共享内容。镜像还设计用于验证对软件包元数据的访问，但发行软件包内容不需要进行验证。例如，客户端可能配置有需要具有 SSL 密钥和证书对才能访问的 \fBhttps\fR 源，以及提供软件包内容的 \fBhttp\fR 镜像。这样，只有经过授权的客户端才可以安装或更新软件包，同时避免了验证软件包内容检索的开销。通过删除系统信息库中除名为 \fBfile\fR 的子目录及其父目录之外的所有子目录可创建镜像。通过使用 \fBpkg.depotd\fR(1M) 的镜像模式还可将源系统信息库置备为镜像。
.SH 全局和非全局区域更新
.sp
.LP
\fBpkg\fR 系统会强制使非全局区域与全局区域保持同步。这表示某些软件包在全局区域和所有非全局区域中必须处于同一版本，以确保运行相同的内核。为此，\fBpkg\fR 会使用 \fBparent\fR 依赖性对非全局区域施加某些约束。有关 \fBparent\fR 依赖性的更多信息，请参见“依赖操作”。
.sp
.LP
由于全局区域对非全局区域施加的限制，非全局区域必须可以访问全局区域的软件包且必须具有相似的发布者配置。使用\fB系统信息库\fR可实现上述两个目标（请参见 \fBpkg.sysrepo\fR(1M) 手册页）。系统信息库可提供全局区域中配置的发布者的访问权，以及有关如何配置这些发布者的信息。要阻止非全局区域在安装或更新期间选择不同软件包，在发布者搜索顺序中系统发布者的排列顺序需要高于非全局区域中配置的发布者的顺序。有关发布者搜索顺序的信息，请参见 \fBpkg\fR(1) 手册页中的 \fBpkg set-publisher\fR 命令。
.sp
.LP
要更新系统上的所有非全局区域，请使用不带全局区域中参数的 \fBpkg update\fR 命令。此命令会在全局区域上执行并以递归方式在每个非全局区域上执行。将对非全局区域仅进行最少的必要更改，以使其与全局区域中所进行的更改同步。例如，假设全局区域和非全局区域中都安装了版本 1 的软件包 \fBfoo\fR，并假设系统信息库中存在版本 2。如果 \fBfoo\fR 具有父项依赖性，则 \fBpkg update foo\fR 会在全局区域和非全局区域中将 \fBfoo\fR 更新至版本 2，这是因为 \fBparent\fR 依赖性会强制使软件包保持同步。如果 \fBfoo\fR 不具有父项依赖性，则 \fBfoo\fR 在全局区域中会更新至版本 2，但在非全局区域中仍为版本 1。
.SH 侧面和变量
.sp
.LP
软件可以具有可选组件和互斥组件。可选组件的示例包括语言环境和文档。互斥组件的示例包括 SPARC 或 x86 和调试或非调试二进制文件。
.sp
.LP
在 IPS 中，可选组件称为\fB侧面\fR，互斥组件称为\fB变量\fR。侧面和变量指定为软件包操作中的标记。每个侧面和变量标记都有一个名称和值。单个操作可以具有多个侧面和变量标记。具有多个侧面和变量标记的组件有多种，例如供开发者使用的特定于体系结构的头文件，或仅用于 SPARC 全局区域的组件。
.sp
.LP
以下是变量标记的一个示例 \fBvariant.arch=sparc\fR。以下是侧面标记的一个示例 \fBvariant.arch=sparc\fR。引用侧面和变量时，通常不带前导字符串 \fBfacet.\fR 和 \fBvariant.\fR。
.sp
.LP
侧面和变量是映像的特殊属性，无法在单个软件包上设置。要查看映像上设置的侧面和变量的当前值，请按 \fBpkg\fR(1) 手册页中所示，使用 \fBpkg facet\fR 和 \fBpkg variant\fR 命令。要修改映像上设置的侧面和变量的值，请使用 \fBpkg change-facet\fR 和 \fBpkg change-variant\fR 命令。
.sp
.LP
软件包客户机将侧面处理为布尔值：侧面在映像中仅能设置为 \fBtrue\fR（启用）或 \fBfalse\fR（禁用）。缺省情况下，映像中的所有侧面都被视为 \fBtrue\fR。
.sp
.LP
可以使用 \fBpkg change-facet\fR 命令在映像内本地设置侧面，也可从父映像继承侧面。例如，非全局区域可从全局区域继承侧面。继承的侧面会在本地设置的侧面之前计算结果，并且优先于本地设置的侧面。如果同一个侧面既是继承的，又是本地设置的，则继承的侧面值会屏蔽本地设置的值。屏蔽的侧面不会影响侧面计算结果和软件包操作。使用 \fBpkg change-facet\fR 命令所做的侧面更改仅影响本地设置的侧面。只能通过更改父映像来更改继承的侧面。缺省情况下，\fBpkg facet\fR 命令不显示屏蔽的侧面。
.sp
.LP
操作的侧面标记值可以设置为 \fBall\fR 或 \fB true\fR，以控制客户机如何过滤有侧面标记的操作。除 \fBall\fR 或 \fBtrue\fR 之外的所有值都具有未定义的行为。有关要安装具有侧面标记的操作而必须在镜像中存在的条件的描述，请参见下文。
.sp
.LP
需要多个级别的过滤时，侧面的 \fBall\fR 值非常有用。在以下示例中，仅当 \fBdoc\fR 侧面和至少一个 \fBlocale\fR 侧面在映像中为 \fBtrue\fR 时，才安装 \fBfoo.txt \fR。这样允许管理员排除文档，但是仍启用或禁用特定语言环境支持。此外，仅当 \fBdoc\fR 和 \fBdevel\fR 侧面在映像中都为 \fBtrue\fR 时，才安装 \fBapi.txt\fR。
.sp
.in +2
.nf
file path=usr/share/doc/foo/foo.txt facet.doc=all facet.locale.en_GB=true facet.locale.en_US=true
file path=usr/share/doc/foo/api.txt facet.doc=all facet.devel=all
.fi
.in -2

.sp
.LP
映像上设置的侧面可以为完整侧面（如 \fBdoc.man\fR）或模式（如 \fBlocale.*\fR）。要禁用侧面名称空间的一部分，仅启用其中的几个侧面时，此方式很有用。例如，您可以禁用所有语言环境，然后仅启用一个或两个特定语言环境，如以下示例所示：
.sp
.in +2
.nf
# \fBpkg change-facet locale.*=false\fR
[output about packages being updated]
# \fBpkg change-facet locale.en_US=true\fR
[output about packages being updated]
.fi
.in -2
.sp

.sp
.LP
大多数变量可以具有任意数量的值。例如，\fBarch\fR 变量可以设置为 \fBi386\fR、\fBsparc\fR、\fBppc\fR、\fBarm\fR 或分发支持的任何体系结构。（Oracle Solaris 中仅使用 \fBi386\fR 和 \fBsparc\fR。）但 \fBdebug\fR 变量例外。\fBdebug\fR 变量只能设置为 \fBtrue\fR 或 \fBfalse\fR；其他值的行为不确定。如果文件操作同时具有非调试和调试版本，则必须针对这两个版本明确设置适用的 \fBdebug\fR 变量，如以下示例所示：
.sp
.in +2
.nf
file group=sys mode=0644 overlay=allow owner=root \e
  path=etc/motd pkg.csize=115 pkg.size=103 preserve=true \e
  variant.debug.osnet=true

file group=sys mode=0644 overlay=allow owner=root \e
  path=etc/motd pkg.csize=68 pkg.size=48 preserve=true \e
  variant.debug.osnet=false
.fi
.in -2

.sp
.LP
要安装使用变量的软件包，必须在映像上设置变量值。\fBarch\fR 和 \fBzone\fR 变量由创建映像和安装其初始内容的程序设置。缺省情况下，\fBdebug.*\fR 变量在映像中设置为 \fBfalse\fR。
.sp
.LP
映像中设置的侧面和变量会影响是否安装特定操作。
.RS +4
.TP
.ie t \(bu
.el o
始终会安装不带侧面或变量标记的操作。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果以下条件存在于映像中，将安装具有侧面标记的操作：
.RS +4
.TP
.ie t \(bu
.el o
操作上具有 \fBall\fR 值的所有侧面标记在映像中都为 \fB true\fR（\fBtrue\fR 是缺省值）。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果操作上的任何侧面标记具有值 \fBtrue\fR，则这些侧面中的至少一个侧面在映像中为 \fBtrue\fR。
.RE
.RE
.RS +4
.TP
.ie t \(bu
.el o
仅当所有变量标记的值与映像中设置的值相同时，才会安装带这些变量标记的操作。
.RE
.RS +4
.TP
.ie t \(bu
.el o
如果侧面和变量都允许安装操作，则会安装带有这两种标记的操作。
.RE
.sp
.LP
可以创建定制侧面标记和 \fBvariant.debug.*\fR 变体标记。有关更多信息，请参见《\fIPackaging and Delivering Software With the Image Packaging System\fR》。以下是 Oracle Solaris 中的常用标记。
.sp

.sp
.TS
tab();
cw(2.75i) cw(2.75i) 
lw(2.75i) lw(2.75i) 
.
变量名可能值
_
\fBvariant.arch\fR\fBsparc\fR, \fBi386\fR
\fBvariant.opensolaris.zone\fR\fBglobal\fR, \fBnonglobal\fR
\fBvariant.debug.*\fR\fBtrue\fR、\fBfalse\fR
.TE

.sp
.LP
以下列表描述了 Oracle Solaris 中使用的一小部分侧面标记：
.sp
.in +2
.nf
facet.devel             facet.doc
facet.doc.html          facet.doc.info
facet.doc.man           facet.doc.pdf
facet.locale.de         facet.locale.en_GB
facet.locale.en_US      facet.locale.fr
facet.locale.ja_JP      facet.locale.zh_CN
.fi
.in -2

.SH 映像策略
.sp
.LP
映像策略由具有布尔值的映像属性所定义。有关 \fBflush-content-cache-on-success\fR 和 \fBsend-uuid\fR 属性的说明以及如何查看和修改其值的信息，请参见 \fBpkg\fR(1) 手册页中的“映像属性”。
.SH 文件
.sp
.LP
因为 \fBpkg\fR(5) 映像可位于任意一个较大的文件系统内，需要使用标记 \fB$IMAGE_ROOT\fR 来区分相对路径。对于典型的系统安装，\fB$IMAGE_ROOT\fR 等效于 /。
.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_ROOT/var/pkg\fR\fR
.ad
.sp .6
.RS 4n
完整或部分映像的元数据目录。
.RE

.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_ROOT/.org.opensolaris,pkg\fR\fR
.ad
.sp .6
.RS 4n
用户映像的元数据目录。
.RE

.sp
.LP
在特定映像的元数据中，某些文件和目录可能包含修复和恢复期间有用的信息。标记 \fB$IMAGE_META \fR 用于指示包含元数据的顶层目录。\fB $IMAGE_META\fR 通常是以上给出的两个路径之一。
.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_META/lost+found\fR\fR
.ad
.sp .6
.RS 4n
在软件包操作期间移动的有冲突目录和文件的位置。
.RE

.sp
.ne 2
.mk
.na
\fB\fB$IMAGE_META/publisher\fR\fR
.ad
.sp .6
.RS 4n
为每个发布者包含一个目录。每个目录存储特定于发布者的元数据。
.RE

.sp
.LP
\fB$IMAGE_META\fR 目录分层结构中的其他路径是专用的，但可以进行更改。
.SH 属性
.sp
.LP
有关下列属性的说明，请参见 \fBattributes\fR(5)：
.sp

.sp
.TS
tab() box;
cw(2.75i) |cw(2.75i) 
lw(2.75i) |lw(2.75i) 
.
属性类型属性值
_
可用性\fBpackage/pkg\fR
_
接口稳定性Uncommitted（未确定）
.TE

.SH 另请参见
.sp
.LP
\fBpkg\fR(1)、\fBpkgsend\fR(1)、\fBpkg.depotd\fR(1M)、\fBpkg.sysrepo\fR(1M)、\fBsvcs\fR(1)、\fBsvcadm\fR(1M)
.sp
.LP
\fI《Adding and Updating Software in Oracle Solaris 11.2》\fR
.sp
.LP
\fI《Copying and Creating Package Repositories in Oracle Solaris 11.2》\fR
.sp
.LP
\fI《Packaging and Delivering Software With the Image Packaging System》\fR
.sp
.LP
\fBhttps://github.com/sonicle/xstream-pkg5-gate/\fR
